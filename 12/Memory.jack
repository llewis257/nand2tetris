// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array RAM;
	static Array HEAP;

    /** Initializes the class. */
    function void init() {
        let RAM = 0;
		let HEAP = 2048;
		let HEAP[0] = -1; // No more free segments
		let HEAP[1] = 16384 - 2048 - 2; // Initial free size
		return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return RAM[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let RAM[address] = value;
		return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array current, selected, block;
		var int currentSize, selectedSize;
		
		if(size < 0){
			do Sys.error(5);
		}
		
		let current = HEAP;
		let selected = -1;
		let selectedSize = HEAP[1] + 1;  // Strictly greater than max
		let currentSize = current[1];
		while(current > -1){
			if(~(currentSize < (size + 2))){
				if(currentSize < selectedSize){
					let selected = current;
					let selectedSize = currentSize;
				}
			}
			let current = current[0];
			let currentSize = current[1];
		}
		if(selected = -1){
			do Sys.error(6);
		}
		
		let selected[1] = selected[1] - size -2;
		let block = selected + selected[1] + 1;
		let block[0] = -1;
		let block[1] = size;
		return block + 2;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array current, block;
		let block = o - 2;
		let current = HEAP;
		while(current[0] > 0){
			let current = current[0];
		}
		let current[0] = block;
		return;
    }    
}
