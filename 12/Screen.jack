// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static int SCREEN;
	static boolean _color;

    /** Initializes the Screen. */
    function void init() {
        let SCREEN = 16384;
		let _color = true;
		return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
		return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let _color = b;
		return;
    }
/******************* Added function ****/

    function int getScreenAddress(int x, int y){
		return (32 * y) + (x / 16);
    }
/******************* Added function ****/
    
    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value, mask;
		
		if((x < 0) | (y < 0) | (x > 511) | (y > 255)){
			do Sys.error(7);
		}
		
		let address = Screen.getScreenAddress(x, y);
		let mask = Math.getTwoRaisedTo(Math.mod(x, 16));
		let value = Memory.peek(SCREEN + address);
		if(_color){
			do Memory.poke(SCREEN + address, value | mask);
		} else {
			do Memory.poke(SCREEN + address, value & (~mask));
		}
		return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
/*****Added function  lines with direction****/
    function void drawVerticalLine(int x, int y0, int yf){
        var int y;
        if(y0 > yf) {
            do Screen.drawVerticalLine(x, yf, y0);
            return;
        }
        let y = y0;
        while((~(y > yf))){
            do Screen.drawPixel(x, y);
            let y = y + 1;
        }
        return;
    }

    function void drawHorizontalLine(int x0, int xf, int y){
        var int x, address;
        if(x0 > xf) {
            do Screen.drawHorizontalLine(xf, x0, y);
            return;
        }
        let x = x0;
        while((~(x > xf))){
            if(((~(Math.mod(x, 16) = 0))) | ((x + 15) > xf)){
                do Screen.drawPixel(x, y);
                let x = x + 1;
            } else {
                let address = Screen.getScreenAddress(x, y);
                if(_color){
                    do Memory.poke(SCREEN + address, -1);
                } else {
                    do Memory.poke(SCREEN + address, 0);
                }
                let x = x + 16;
            }
        }
        return;
}/*****Added function  lines with direction****/

    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, diff, dx, dy, stepA, stepB;
		
		if(y1 = y2){
			if(x1 = x2){
				do Screen.drawPixel(x1, y1);
				return;
			} else {
				do Screen.drawHorizontalLine(x1, x2, y1);
				return;
			}
		}
		if(x1 = x2){
			do Screen.drawVerticalLine(x1, y1, y2);
			return;
		}		
		
		let dx = x2 - x1;
		let dy = y2 - y1;
		if(dx < 0){
			let stepA = -1;
		} else {
			let stepA = 1;
		}
		if(dy < 0){
			let stepB = -1;
		} else {
			let stepB = 1;
		}
		while((Math.abs(x1 + a - x2) > 0) | (Math.abs(y1 + b - y2) > 0)){
			do Screen.drawPixel(x1 + a, y1 + b);
			if(diff < 0){
				let a = a + stepA;
				let diff = diff + Math.abs(dy);
			} else {
				let b = b + stepB;
				let diff = diff - Math.abs(dx);
			}
		}
		return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int y;
		if(y1 > y2) {
			do Screen.drawRectangle(x2, y2, x1, y1);
			return;
		}
		let y = y1;
		while((~(y > y2))){
			do Screen.drawHorizontalLine(x1, x2, y);
			let y = y + 1;
		}
		return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, dl;
		if (r > 181){
			do Sys.error(13);
		}
		let dy = -r;
		while(~(dy > r)){
			let dl = Math.sqrt((r * r) - (dy * dy));
			do Screen.drawLine(x - dl, y + dy, x + dl, y + dy);
			let dy = dy + 1;
		}
		return;
    }
}
